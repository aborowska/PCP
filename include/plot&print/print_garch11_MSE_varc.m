clear all
addpath(genpath('include/'));

model = 'agarch11'; %'arch1';
TT = [1000,2500];
suffix = [];

% model = 'garch11'; 
% TT = [1000,2500];
% suffix = '_tunning';% [];
  	
S = 50;
H = 100;
sigma1 = 1;
sigma2 = 2;
c = (sigma2 - sigma1)/sqrt(2*pi); % mean of eps
mu = 0;
mu2 = 0;
omega = 1;
alpha = 0.1;
beta = 0.8;

if strcmp(model,'garch11')
    parameters = {'$\\mu$','$\\omega$','$\\alpha$','$\\beta$'};
    param_true = [0,1,0.1,0.8];
elseif strcmp(model,'agarch11')
    parameters = {'$\\mu_{1}$','$\\omega$','$\\mu_{2}$','$\\alpha$','$\\beta$'};  
    param_true = [0,1,0,0.1,0.8]; 
elseif strcmp(model,'arch1')
    parameters = {'$\\mu$','$\\omega$','$\\mu2$','$\\alpha$'};
    param_true = [0,1,0,0.1];    
end

% clear -regexp ^MSE ^mean ^draw


%% Create table
fname = ['results/',model,'/',model,'_',num2str(sigma1),'_',num2str(sigma2),...
    '_H',num2str(H),'_pcp_mc_varc',suffix,'_new_v2.tex'];
FID = fopen(fname, 'w+');

fprintf(FID, '{ \\tiny \n');
fprintf(FID, '{ \\renewcommand{\\arraystretch}{1.1} \n');
fprintf(FID, '\\begin{sidewaystable} \n');
fprintf(FID, '\\center \n');
fprintf(FID, '\\begin{tabular}{cc cc | cccc | cccc} \n');

fprintf(FID, ['Value && MC Error & Posterior & CP0  & PCP0 & CP10\\%%  & PCP10\\%% &', ...
'CP$_{var,mf}$ & PCP$_{var,mf}$ & CP$_{var,mle}$ & PCP$_{var,mle }$\\\\ \\hline \n']); 
for T = TT
    %   load variables
    %% VARC  (_5 variables are for 0.5% VaR)
    varc = true;
    name = ['results\',model,'\',model,'_1_2_T',num2str(T),...
        '_H100_II10_PCP0_MC_(R2017a)_varc_low_es',suffix,'.mat'];
%     load(name,'param_true')
    load(name,'-regexp','^MSE')
%     load(name,'-regexp','^mean')
%     load(name,'-regexp','^draw')
    load(name,'-regexp','^cdf')
    load(name,'-regexp','^ES')

    MSE_ES;

    %% TIME CONSTANT
    varc = false;
    name = ['results\',model,'\',model,'_1_2_T',num2str(T),...
        '_H100_II10_PCP0_MC_(R2017a)_low_es',suffix,'.mat'];
%     load(name,'param_true')
    load(name,'-regexp','^MSE')
%     load(name,'-regexp','^mean')
%     load(name,'-regexp','^draw')
    load(name,'-regexp','^cdf')
    load(name,'-regexp','^ES')

    MSE_ES;
    
    mean_robust = @(xx) mean(xx(xx<1));
    std_robust = @(xx) std(xx(xx<1));
    
    %% Print table block
    fprintf(FID, '\\hline \n');
    fprintf(FID, ['\\multicolumn{12}{c}{$T =',num2str(T),'$}  \\\\ \n']);
    fprintf(FID, '\\hline \n');

    % 0.5% VaR and ES    
    fprintf(FID,'\\rowcolor{LightCyan} \n'); 
    fprintf(FID,['VaR 0.5\\%% && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
        '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
        mean_robust(MSE_05), mean_robust(MSE_05_post), mean_robust(MSE_05_post_C0), mean_robust(MSE_05_post_PC0), ...
        mean_robust(MSE_05_post_C), mean_robust(MSE_05_post_PC), ...        
        mean_robust(MSE_05_post_Cah), mean_robust(MSE_05_post_PCah), ...     
        mean_robust(MSE_05_post_Cm), mean_robust(MSE_05_post_PCm));   
    fprintf(FID,['  && (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) &', ...
        '(%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) \\\\ \n'], ...
        std_robust(MSE_05), std_robust(MSE_05_post), std_robust(MSE_05_post_C0), std_robust(MSE_05_post_PC0), ...
        std_robust(MSE_05_post_C), std_robust(MSE_05_post_PC), ...        
        std_robust(MSE_05_post_Cah), std_robust(MSE_05_post_PCah), ...     
        std_robust(MSE_05_post_Cm), std_robust(MSE_05_post_PCm));       
%     fprintf(FID,['VaR 0.5\\%% corr && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
%         '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
%         mean_robust(MSE_05(MSE_05<1)), mean_robust(MSE_05_post(MSE_05_post<1)), ...
%         mean_robust(MSE_05_post_C0(MSE_05_post_C0<1)), mean_robust(MSE_05_post_PC0(MSE_05_post_PC0<1)), ...
%         mean_robust(MSE_05_post_C(MSE_05_post_C<1)), mean_robust(MSE_05_post_PC(MSE_05_post_PC<1)), ...        
%         mean_robust(MSE_05_post_Cah(MSE_05_post_Cah<1)), mean_robust(MSE_05_post_PCah(MSE_05_post_PCah<1)), ...     
%         mean_robust(MSE_05_post_Cm(MSE_05_post_Cm<1)), mean_robust(MSE_05_post_PCm(MSE_05_post_PCm<1)));          
%     fprintf(FID,['no. MSE$>$1 && %d & %d & %d & %d & %d & %d &', ...
%         '%d & %d & %d & %d \\\\[1ex] \n'], ...
%         sum(MSE_05>=1), sum(MSE_05_post>=1), sum(MSE_05_post_C0>=1), sum(MSE_05_post_PC0>=1), ...
%         sum(MSE_05_post_C>=1), sum(MSE_05_post_PC>=1), ...        
%         sum(MSE_05_post_Cah>=1), sum(MSE_05_post_PCah>=1), ...     
%         sum(MSE_05_post_Cm>=1), sum(MSE_05_post_PCm>=1));   

    fprintf(FID,'\\rowcolor{LightCyan} \n'); 
    fprintf(FID,['ES 0.5\\%% && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
        '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
        mean_robust(MSE_es_05), mean_robust(MSE_es_05_post), mean_robust(MSE_es_05_post_C0), mean_robust(MSE_es_05_post_PC0), ...
        mean_robust(MSE_es_05_post_C), mean_robust(MSE_es_05_post_PC), ...        
        mean_robust(MSE_es_05_post_Cah), mean_robust(MSE_es_05_post_PCah), ...     
        mean_robust(MSE_es_05_post_Cm), mean_robust(MSE_es_05_post_PCm));   
    fprintf(FID,['  && (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) &', ...
        '(%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) \\\\ [1ex] \n'], ...
        std_robust(MSE_es_05), std_robust(MSE_es_05_post), std_robust(MSE_es_05_post_C0), std_robust(MSE_es_05_post_PC0), ...
        std_robust(MSE_es_05_post_C), std_robust(MSE_es_05_post_PC), ...        
        std_robust(MSE_es_05_post_Cah), std_robust(MSE_es_05_post_PCah), ...     
        std_robust(MSE_es_05_post_Cm), std_robust(MSE_es_05_post_PCm));       
%     fprintf(FID,['ES 0.5\\%% corr && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
%         '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
%         mean_robust(MSE_es_05(MSE_es_05<1)), mean_robust(MSE_es_05_post(MSE_es_05_post<1)), ...
%         mean_robust(MSE_es_05_post_C0(MSE_es_05_post_C0<1)), mean_robust(MSE_es_05_post_PC0(MSE_es_05_post_PC0<1)), ...
%         mean_robust(MSE_es_05_post_C(MSE_es_05_post_C<1)), mean_robust(MSE_es_05_post_PC(MSE_es_05_post_PC<1)), ...        
%         mean_robust(MSE_es_05_post_Cah(MSE_es_05_post_Cah<1)), mean_robust(MSE_es_05_post_PCah(MSE_es_05_post_PCah<1)), ...     
%         mean_robust(MSE_es_05_post_Cm(MSE_es_05_post_Cm<1)), mean_robust(MSE_es_05_post_PCm(MSE_es_05_post_PCm<1)));          
%     fprintf(FID,['no. MSE$>$1 && %d & %d & %d & %d & %d & %d &', ...
%         '%d & %d & %d & %d \\\\[1.5ex]  \n \\rowcolor{LightCyan} \n'], ...
%         sum(MSE_es_05>=1), sum(MSE_es_05_post>=1), sum(MSE_es_05_post_C0>=1), sum(MSE_es_05_post_PC0>=1), ...
%         sum(MSE_es_05_post_C>=1), sum(MSE_es_05_post_PC>=1), ...        
%         sum(MSE_es_05_post_Cah>=1), sum(MSE_es_05_post_PCah>=1), ...     
%         sum(MSE_es_05_post_Cm>=1), sum(MSE_es_05_post_PCm>=1)); 


    % 1% VaR and ES
    fprintf(FID,'\\rowcolor{LightCyan} \n'); 
    fprintf(FID,['VaR 1\\%% && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
        '%6.4f & %6.4f & %6.4f & %6.4f \\\\   \n'], ...
        mean_robust(MSE_1), mean_robust(MSE_1_post), mean_robust(MSE_1_post_C0), mean_robust(MSE_1_post_PC0), ...
        mean_robust(MSE_1_post_C), mean_robust(MSE_1_post_PC), ...        
        mean_robust(MSE_1_post_Cah), mean_robust(MSE_1_post_PCah), ...     
        mean_robust(MSE_1_post_Cm), mean_robust(MSE_1_post_PCm)); 
    fprintf(FID,[' && (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) &', ...
        '(%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) \\\\  \n'], ...
        std_robust(MSE_1), std_robust(MSE_1_post), std_robust(MSE_1_post_C0), std_robust(MSE_1_post_PC0), ...
        std_robust(MSE_1_post_C), std_robust(MSE_1_post_PC), ...        
        std_robust(MSE_1_post_Cah), std_robust(MSE_1_post_PCah), ...     
        std_robust(MSE_1_post_Cm), std_robust(MSE_1_post_PCm));     
%     fprintf(FID,['VaR 1\\%% corr && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
%         '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n \\rowcolor{LightCyan} \n'], ...
%         mean_robust(MSE_1(MSE_1<1)), mean_robust(MSE_1_post(MSE_1_post<1)), ...
%         mean_robust(MSE_1_post_C0(MSE_1_post_C0<1)), mean_robust(MSE_1_post_PC0(MSE_1_post_PC0<1)), ...
%         mean_robust(MSE_1_post_C(MSE_1_post_C<1)), mean_robust(MSE_1_post_PC(MSE_1_post_PC<1)), ...        
%         mean_robust(MSE_1_post_Cah(MSE_1_post_Cah<1)), mean_robust(MSE_1_post_PCah(MSE_1_post_PCah<1)), ...     
%         mean_robust(MSE_1_post_Cm(MSE_1_post_Cm<1)), mean_robust(MSE_1_post_PCm(MSE_1_post_PCm<1)));          
%     fprintf(FID,['no. MSE$>$1 && %d & %d & %d & %d & %d & %d &', ...
%         '%d & %d & %d & %d \\\\[1ex] \n \\rowcolor{LightCyan} \n'], ...
%         sum(MSE_1>=1), sum(MSE_1_post>=1), sum(MSE_1_post_C0>=1), sum(MSE_1_post_PC0>=1), ...
%         sum(MSE_1_post_C>=1), sum(MSE_1_post_PC>=1), ...        
%         sum(MSE_1_post_Cah>=1), sum(MSE_1_post_PCah>=1), ...     
%         sum(MSE_1_post_Cm>=1), sum(MSE_1_post_PCm>=1));   

    fprintf(FID,'\\rowcolor{LightCyan} \n'); 
    fprintf(FID,['ES 1\\%% && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
        '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
        mean_robust(MSE_es_1), mean_robust(MSE_es_1_post), mean_robust(MSE_es_1_post_C0), mean_robust(MSE_es_1_post_PC0), ...
        mean_robust(MSE_es_1_post_C), mean_robust(MSE_es_1_post_PC), ...        
        mean_robust(MSE_es_1_post_Cah), mean_robust(MSE_es_1_post_PCah), ...     
        mean_robust(MSE_es_1_post_Cm), mean_robust(MSE_es_1_post_PCm));
    fprintf(FID,['  && (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) &', ...
        '(%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) \\\\ [1ex]\n'], ...
        std_robust(MSE_es_1), std_robust(MSE_es_1_post), std_robust(MSE_es_1_post_C0), std_robust(MSE_es_1_post_PC0), ...
        std_robust(MSE_es_1_post_C), std_robust(MSE_es_1_post_PC), ...        
        std_robust(MSE_es_1_post_Cah), std_robust(MSE_es_1_post_PCah), ...     
        std_robust(MSE_es_1_post_Cm), std_robust(MSE_es_1_post_PCm));    
%     fprintf(FID,['ES 1\\%% corr && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
%         '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n \\rowcolor{LightCyan} \n'], ...
%         mean_robust(MSE_es_1(MSE_es_1<1)), mean_robust(MSE_es_1_post(MSE_es_1_post<1)), ...
%         mean_robust(MSE_es_1_post_C0(MSE_es_1_post_C0<1)), mean_robust(MSE_es_1_post_PC0(MSE_es_1_post_PC0<1)), ...
%         mean_robust(MSE_es_1_post_C(MSE_es_1_post_C<1)), mean_robust(MSE_es_1_post_PC(MSE_es_1_post_PC<1)), ...        
%         mean_robust(MSE_es_1_post_Cah(MSE_es_1_post_Cah<1)), mean_robust(MSE_es_1_post_PCah(MSE_es_1_post_PCah<1)), ...     
%         mean_robust(MSE_es_1_post_Cm(MSE_es_1_post_Cm<1)), mean_robust(MSE_es_1_post_PCm(MSE_es_1_post_PCm<1)));          
%     fprintf(FID,['no. MSE$>$1 && %d & %d & %d & %d & %d & %d &', ...
%         '%d & %d & %d & %d \\\\[1.5ex] \n'], ...
%         sum(MSE_es_1>=1), sum(MSE_es_1_post>=1), sum(MSE_es_1_post_C0>=1), sum(MSE_es_1_post_PC0>=1), ...
%         sum(MSE_es_1_post_C>=1), sum(MSE_es_1_post_PC>=1), ...        
%         sum(MSE_es_1_post_Cah>=1), sum(MSE_es_1_post_PCah>=1), ...     
%         sum(MSE_es_1_post_Cm>=1), sum(MSE_es_1_post_PCm>=1)); 


    % 5% VaR and ES
    fprintf(FID,'\\rowcolor{LightCyan} \n'); 
    fprintf(FID,['VaR 5\\%% && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
        '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
        mean_robust(MSE_5), mean_robust(MSE_5_post), mean_robust(MSE_5_post_C0), mean_robust(MSE_5_post_PC0), ...
        mean_robust(MSE_5_post_C), mean_robust(MSE_5_post_PC), ...        
        mean_robust(MSE_5_post_Cah), mean_robust(MSE_5_post_PCah), ...     
        mean_robust(MSE_5_post_Cm), mean_robust(MSE_5_post_PCm));   
    fprintf(FID,['  && (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) &', ...
        '(%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) \\\\ \n'], ...
        std_robust(MSE_5), std_robust(MSE_5_post), std_robust(MSE_5_post_C0), std_robust(MSE_5_post_PC0), ...
        std_robust(MSE_5_post_C), std_robust(MSE_5_post_PC), ...        
        std_robust(MSE_5_post_Cah), std_robust(MSE_5_post_PCah), ...     
        std_robust(MSE_5_post_Cm), std_robust(MSE_5_post_PCm));       
%     fprintf(FID,['VaR 5\\%% corr && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
%         '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
%         mean_robust(MSE_5(MSE_5<1)), mean_robust(MSE_5_post(MSE_5_post<1)), ...
%         mean_robust(MSE_5_post_C0(MSE_5_post_C0<1)), mean_robust(MSE_5_post_PC0(MSE_5_post_PC0<1)), ...
%         mean_robust(MSE_5_post_C(MSE_5_post_C<1)), mean_robust(MSE_5_post_PC(MSE_5_post_PC<1)), ...        
%         mean_robust(MSE_5_post_Cah(MSE_5_post_Cah<1)), mean_robust(MSE_5_post_PCah(MSE_5_post_PCah<1)), ...     
%         mean_robust(MSE_5_post_Cm(MSE_5_post_Cm<1)), mean_robust(MSE_5_post_PCm(MSE_5_post_PCm<1)));          
%     fprintf(FID,['no. MSE$>$1 && %d & %d & %d & %d & %d & %d &', ...
%         '%d & %d & %d & %d \\\\[1ex] \n'], ...
%         sum(MSE_5>=1), sum(MSE_5_post>=1), sum(MSE_5_post_C0>=1), sum(MSE_5_post_PC0>=1), ...
%         sum(MSE_5_post_C>=1), sum(MSE_5_post_PC>=1), ...        
%         sum(MSE_5_post_Cah>=1), sum(MSE_5_post_PCah>=1), ...     
%         sum(MSE_5_post_Cm>=1), sum(MSE_5_post_PCm>=1));   

    fprintf(FID,'\\rowcolor{LightCyan} \n'); 
    fprintf(FID,['ES 5\\%% && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
        '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
        mean_robust(MSE_es_5), mean_robust(MSE_es_5_post), mean_robust(MSE_es_5_post_C0), mean_robust(MSE_es_5_post_PC0), ...
        mean_robust(MSE_es_5_post_C), mean_robust(MSE_es_5_post_PC), ...        
        mean_robust(MSE_es_5_post_Cah), mean_robust(MSE_es_5_post_PCah), ...     
        mean_robust(MSE_es_5_post_Cm), mean_robust(MSE_es_5_post_PCm));  
    fprintf(FID,[' && (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) &', ...
        '(%6.4f) & (%6.4f) & (%6.4f) & (%6.4f) \\\\ \n'], ...
        std_robust(MSE_es_5), std_robust(MSE_es_5_post), std_robust(MSE_es_5_post_C0), std_robust(MSE_es_5_post_PC0), ...
        std_robust(MSE_es_5_post_C), std_robust(MSE_es_5_post_PC), ...        
        std_robust(MSE_es_5_post_Cah), std_robust(MSE_es_5_post_PCah), ...     
        std_robust(MSE_es_5_post_Cm), std_robust(MSE_es_5_post_PCm));  
%     fprintf(FID,['ES 5\\%% corr && %6.4f & %6.4f & %6.4f & %6.4f & %6.4f & %6.4f &', ...
%         '%6.4f & %6.4f & %6.4f & %6.4f \\\\ \n'], ...
%         mean_robust(MSE_es_5(MSE_es_5<1)), mean_robust(MSE_es_5_post(MSE_es_5_post<1)), ...
%         mean_robust(MSE_es_5_post_C0(MSE_es_5_post_C0<1)), mean_robust(MSE_es_5_post_PC0(MSE_es_5_post_PC0<1)), ...
%         mean_robust(MSE_es_5_post_C(MSE_es_5_post_C<1)), mean_robust(MSE_es_5_post_PC(MSE_es_5_post_PC<1)), ...        
%         mean_robust(MSE_es_5_post_Cah(MSE_es_5_post_Cah<1)), mean_robust(MSE_es_5_post_PCah(MSE_es_5_post_PCah<1)), ...     
%         mean_robust(MSE_es_5_post_Cm(MSE_es_5_post_Cm<1)), mean_robust(MSE_es_5_post_PCm(MSE_es_5_post_PCm<1)));          
%     fprintf(FID,['no. MSE$>$1 && %d & %d & %d & %d & %d & %d &', ...
%         '%d & %d & %d & %d \\\\[1ex] \n'], ...
%         sum(MSE_es_5>=1), sum(MSE_es_5_post>=1), sum(MSE_es_5_post_C0>=1), sum(MSE_es_5_post_PC0>=1), ...
%         sum(MSE_es_5_post_C>=1), sum(MSE_es_5_post_PC>=1), ...        
%         sum(MSE_es_5_post_Cah>=1), sum(MSE_es_5_post_PCah>=1), ...     
%         sum(MSE_es_5_post_Cm>=1), sum(MSE_es_5_post_PCm>=1));         
end      
fprintf(FID, '\\hline \n');
% 
% fprintf(FID, '\\multicolumn{12}{l}{\\footnotesize{corr: corrected for outliers, average over MSE$<$1.}}  \\\\ \n');
% fprintf(FID, '%%\\multicolumn{12}{l}{\\footnotesize{CP: Censored posterior.}}  \\\\ \n');
% fprintf(FID, '%%\\multicolumn{12}{l}{\\footnotesize{PCP: Partially censored posterior.}} \\\\ \n');
% fprintf(FID, '%%\\multicolumn{12}{l}{\\footnotesize{(P)CP0: Censoring with threshold 0.}} \\\\ \n'); 
% fprintf(FID, '%%\\multicolumn{12}{l}{\\footnotesize{(P)CP10\\%%: Censoring with threshold 10\\%% sample quantile.}}  \\\\ \n');
% fprintf(FID, '%%\\multicolumn{12}{l}{\\footnotesize{(P)CP var ad: Time Varying Censoring, ad hoc method.}} \\\\ \n'); 
% fprintf(FID, '%%\\multicolumn{12}{l}{\\footnotesize{(P)CP var mle: Time Varying Censoring, MLE based method.}}  \\\\ \n');    
fprintf(FID, '\\end{tabular}\n ');

caption = ['\\caption{',model,' zero mean split normal model with $\\sigma_{1} = ',num2str(sigma1),'$ and $\\sigma_{2} = ',num2str(sigma2),'$: ',...
    ' averages (over 50 MC replications) of MSEs and their standard errors (in parentheses) ',...
    ' for VaR and ES prediction over out-of-sample horizon of $H=',num2str(H),'$ ',...
    ' for standard posterior, censored posterior and partially censored posterior',...
    ' (the latter two with two time-constant and two time-varying thresholds). ',...
    ' For the censored and the partially censored posterior the focus is on the left tail.} \n'];        

fprintf(FID, caption);

label = ['\\label{tab:',model,'_pcp_var}  \n'];
fprintf(FID, label);

fprintf(FID, '\\end{sidewaystable}\n');

fprintf(FID, '}\n');
fprintf(FID, '}');
fclose(FID);        
  